[alias]

  ##
  # Git alias settings suitable for topic branches.
  #
  # These aliases are simple starting points for a simple topic flow.
  # Lots of people have lots of ideas about how to do various git flows.
  #
  # Some people like to use a topic branch for a new feature, or a
  # hotfix patch, or refactoring work, or some spike research, etc.
  #
  # Our simple workflow:
  #
  #     $ git topic-start foo
  #     ... do work ...
  #     $ git topic-finish
  #
  # If you want more control, then you can use these building blocks: 
  # 
  #     $ git topic-create foo
  #     $ git topic-delete
  #
  # If you want to pull and push while you're working, then use these:
  #
  #     $ git topic-pull
  #     $ git topic-push
  #
  # Ideas for your own alias customizations:
  #
  #   * Notify your team, such as by sending an email, posting to chat, etc.
  #   * Trigger testing of the new topic branch to ensure all tests succeed.
  #   * Update the project management software.
  #
  # Customize these aliases as you like for your own workflow.
  ##

  ##
  # Provide the name of the topic base branch, such as "master".
  #
  # When we create a new topic branch, we base it on the topic base branch.
  # Many projects use the default "master" branch; some projects use custom
  # branches, such as "trunk", "develop", "integrate", "release", etc.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-base-branch-name = "!f() { echo master; };f"
  

  ### START & FINISH ###

  ##
  # Start a topic branch.
  #
  # Example:
  #
  #     git topic-start foo
  #
  # This implementatation does these steps:
  #
  #   1. Create the topic branch.
  #   2. Push the topic branch.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-start = "!f(){ \
    branch=\"$1\"; \
    git topic-create \"$branch\"; \
    git topic-push; \
  };f"

  ##
  # Finish a topic branch; this must be the current branch.
  #
  # Example:
  #
  #     git topic-finish
  #
  # This implementatation does these:
  #
  #   1. Push the topic branch.
  #   2. Delete the topic branch.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-finish = "!f(){ \
    git topic-push; \
    git topic-delete; \
  };f"

  ### CREATE & DELETE ###

  ##
  # Create a topic branch.
  #
  # Example:
  #
  #     git topic-create foo
  #
  # This implementatation does these steps:
  #
  #   1. Update the base branch locally.
  #   2. Create a new branch with your topic name, based on the base branch.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-create = "!f(){ \
    branch=\"$1\"; \
    base=$(git topic-base-branch-name); \
    git checkout \"$base\"; git pull; \
    git checkout -b \"$branch\" \"$base\"; \
  };f"

  ##
  # Delete a topic branch; this must be the current branch.
  #
  # Example:
  #
  #     git topic-delete
  #
  # This implementatation does these:
  #
  #   1. Delete the topic branch locally.
  #   2. Delete the topic branch remotely.
  #
  # Customize this for your own workflow preferences.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation deletes your branch for the site.
  #
  # Many teams choose to delete topic branches when they are finished,
  # to keep the repositories clean and with a smaller number of branches.
  #
  # If git says "unable to push to unqualified destination" then it means
  # that the remote branch doesn't exist, so git is unable to delete it.
  # That's fine; it means someone else has already deleted the branch.
  # To synchronize your branch list, use "git fetch --prune".
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-delete = "!f(){ \
    branch=$(git branch-name); \
    base=$(git topic-base-branch-name); \
    git checkout \"$base\"; \
    git branch --delete \"$branch\"; \
    git push origin \":$branch\"; \
  };f"

  ### PULL & PUSH ###

  ##
  # Update the current topic branch by pulling changes.
  #
  # Example:
  #
  #     git topic-pull
  #
  # This implementatation does these:
  #
  #   1. Update the trunk branch
  #   2. Update the topic branch with any changes from the master branch
  #
  # If you use any kind of testing framework, or test driven development,
  # then it can be wise to test your topic immediately after running this,
  # to ensure that any available updates are successfully integrated.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-pull = "!f(){ \
    branch=$(git branch-name); \
    base=$(git topic-base-branch-name); \
    git checkout \"$base\"; git pull; \
    git checkout \"$branch\"; git rebase \"$base\"; \
  };f"

  ##
  # Update the current topic branch by pushing changes.
  #
  # Example:
  #
  #     git topic-push
  #
  # This implementatation does these:
  #
  #   1. Push the topic branch to the origin.
  #   2. Set the upstream tracking.
  #
  # Customize this for your own workflow preferences.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation makes your branch visible to collaborators.
  #
  # Many teams share branches before they are fully ready, to help
  # the team provide feedback on the work-in-progress.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-push = "!f(){ \
    branch=$(git branch-name); \
    git push --set-upstream origin \"$branch\"; \
  };f"

  ##
  # Update the current topic branch by synchronizing changes.
  #
  # Example:
  #
  #     git topic-sync
  #
  # This implementation does these:
  #
  #   1. Run topic-pull.
  #   2. Run topic-push.
  #
  # Customize this alias as you like for your own workflow.
  ##

  topic-sync = "!f(){ \
    git topic-pull; \
    git topic-push; \
  };f"
